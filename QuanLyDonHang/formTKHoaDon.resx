<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Zo70OZAcZdAAAAAASUVORK5CYII=
</value>
  </data>
</root>